/*
 * @description
 * @link https://github.com/type-challenges/type-challenges/blob/master/questions/734-extreme-inclusive-range/README.md
 */

/* _____________ Your Code Here _____________ */
// 这里是构建111111的数组
// 如果构建数组可以是123这样的数据 那么直接可以infer出想要的结果
// type GenerateCore<T extends string, A extends number[] = []> = `${A["length"] &
//   number}` extends T
//   ? A
//   : GenerateCore<T, [...A, 1]>;
// type GenerateArrHelper<
//   T extends string,
//   A extends unknown[] = []
// > = T extends `${infer F}${infer R}`
//   ? GenerateArrHelper<
//       R,
//       [
//         ...A,
//         ...A,
//         ...A,
//         ...A,
//         ...A,
//         ...A,
//         ...A,
//         ...A,
//         ...A,
//         ...A,
//         ...GenerateCore<F>
//       ]
//     >
//   : A;
// type GenerateArr<T extends number> = GenerateArrHelper<`${T & number}`>;
// type InclusiveRangeHelper<
//   A extends unknown[],
//   B extends unknown[],
//   RESULT extends unknown[] = [],
//   C extends unknown[] = [1]
// > = B extends [infer F, ...infer R]
//   ? InclusiveRangeHelper<A, R, [...RESULT, [...A, ...C]["length"]], [...C, 1]>
//   : [A["length"], ...RESULT];
// type InclusiveRange<
//   Lower extends number,
//   Higher extends number,
//   A extends unknown[] = GenerateArr<Lower>,
//   B extends unknown[] = GenerateArr<Higher>
// > = B extends [...A, ...infer R] ? InclusiveRangeHelper<A, R> : [];

// 当然你也可以一步操作
type InclusiveRange<
  Lower extends number,
  Higher extends number,
  Result extends number[] = [], // 结果数据
  Flag extends boolean = false, // 标识是否进入目标区域
  Tmp extends number[] = [] // 记录遍历的次数
> = Flag extends true
  ? Lower extends Higher
    ? Result
    : Tmp["length"] extends Higher
    ? [...Result, Tmp["length"]]
    : InclusiveRange<
        Lower,
        Higher,
        [...Result, Tmp["length"]],
        true,
        [...Tmp, 1]
      >
  : Tmp["length"] extends Lower
  ? InclusiveRange<Lower, Higher, [...Result, Tmp["length"]], true, [...Tmp, 1]>
  : Tmp["length"] extends Higher
  ? [] // 这里的[] 是解决 Lower 比 Higher 大的情况。因为如果标识flag为true的话 是不会走这个else的
  : InclusiveRange<Lower, Higher, Result, false, [...Tmp, 1]>;

/* _____________ Test Cases _____________ */
import { Equal, Expect } from "@type-challenges/utils";

type A = InclusiveRange<5, 6>;

type cases = [
  // Expect<Equal<GenerateCore<"1">, [1]>>,
  // Expect<Equal<GenerateCore<"0">, []>>,

  Expect<Equal<InclusiveRange<200, 1>, []>>,
  Expect<Equal<InclusiveRange<10, 5>, []>>,
  Expect<Equal<InclusiveRange<5, 10>, [5, 6, 7, 8, 9, 10]>>,
  Expect<Equal<InclusiveRange<5, 5>, [5]>>,
  Expect<Equal<InclusiveRange<0, 10>, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]>>,
  Expect<
    Equal<
      InclusiveRange<1, 200>,
      [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        150,
        151,
        152,
        153,
        154,
        155,
        156,
        157,
        158,
        159,
        160,
        161,
        162,
        163,
        164,
        165,
        166,
        167,
        168,
        169,
        170,
        171,
        172,
        173,
        174,
        175,
        176,
        177,
        178,
        179,
        180,
        181,
        182,
        183,
        184,
        185,
        186,
        187,
        188,
        189,
        190,
        191,
        192,
        193,
        194,
        195,
        196,
        197,
        198,
        199,
        200
      ]
    >
  >,
  Expect<
    Equal<
      InclusiveRange<22, 146>,
      [
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        124,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146
      ]
    >
  >
];
